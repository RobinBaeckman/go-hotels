services:
  db:
    container_name: db
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: gohotels
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: gohotels
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gohotels -d gohotels"]
      interval: 3s
      timeout: 3s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data

  api:
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: "1.0"
    container_name: api
    build:
      context: .
      dockerfile: Dockerfile
    ports: ["8080:8080"]
    environment:
      # App
      - PORT=8080
      - APP_ENV=local
      - DATABASE_URL=postgres://gohotels:secret@db:5432/gohotels?sslmode=disable
      # OpenTelemetry â†’ Alloy (running in the other stack)
      - OTEL_EXPORTER_OTLP_ENDPOINT=alloy:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      # Tip: your code already sets service.name/version/env via resource, so you can omit this
      # - OTEL_RESOURCE_ATTRIBUTES=service.name=go-hotels-api,service.version=0.1.0,environment=local
    depends_on:
      db:
        condition: service_healthy
    # Healthcheck requires curl/wget inside the image; keep only if present
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 10s
      timeout: 2s
      retries: 10
      start_period: 10s

volumes:
  db_data:
