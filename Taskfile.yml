version: "3.44.1"

dotenv:
  - ".env"
  - ".env.local"

vars:
  GHCR_USER: robinbaeckman
  IMAGE_NAME: ghcr.io/{{.GHCR_USER | lower}}/go-hotels
  IMAGE_TAG: '{{.GITHUB_SHA | default "dev"}}'

tasks:
  generate:
    desc: Generate Go code from OpenAPI spec
    cmds:
      - go tool oapi-codegen -config api/oapi-codegen.cfg.yaml api/openapi.yaml
    sources:
      - api/openapi.yaml
      - api/oapi-codegen.cfg.yaml
    generates:
      - api/openapi.gen.go

  run:
    desc: Run the REST server
    cmds:
      - go run ./cmd/rest

  # ---------------------
  # Code Quality
  # ---------------------
  fmt:
    desc: Format code (fix issues)
    cmds:
      - go fmt ./...
      - go tool goimports -w .

  fmt-check:
    desc: Fail if code is not formatted
    cmds:
      - test -z "$(go fmt ./...)"
      - test -z "$(go tool goimports -l .)"

  lint:
    desc: Run static analysis with golangci-lint
    cmds:
      - go tool golangci-lint run ./...

  tidy:
    desc: Run go mod tidy
    cmds:
      - git diff --exit-code go.mod go.sum || (echo "‚ùå go.mod or go.sum are not tidy. Run 'go mod tidy' and commit the changes." && exit 1)

  # ---------------------
  # Testing
  # ---------------------
  test:
    desc: Run **unit tests** and generate coverage profile (excluding integration tests)
    cmds:
      - go test $(go list ./... | grep -v 'test/integration') -v

  coverage-unit:
    desc: Run unit tests with coverage (no integration tests)
    cmds:
      # - go test -coverprofile=coverage.out -covermode=set $(go list ./... | grep -v '/test/integration') > /dev/null
      - go test -coverprofile=coverage.out -covermode=set $(go list ./... | grep -v '/test/integration')
      - ./scripts/coverage-check.sh

  integration-up:
    desc: Start integration environment with Docker Compose
    cmds:
      - if [ "$CI" = "true" ]; then docker compose -f docker-compose.base.yml -f docker-compose.integration.yml up -d; else DOCKER_BUILDKIT=1 docker compose -f docker-compose.base.yml -f docker-compose.integration.yml up -d --build; fi

  integration-down:
    desc: Stop integration environment and remove volumes
    cmds:
      - docker compose -f docker-compose.base.yml -f docker-compose.integration.yml down -v

  integration-test:
    desc: Run Go integration tests (works locally & in CI)
    cmds:
      - task integration-down
      - task integration-up
      - echo "üöÄ Running Go integration tests"
      - go test -tags=integration ./test/integration/... -v
      - task integration-down

  # ---------------------
  # Database
  # ---------------------
  migrate-create:
    desc: Create a new migration file
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "‚ùå You must provide a name: task migrate-create -- create_hotels_table"
          exit 1
        fi
        migrate create -ext sql -dir migrations -seq "{{.CLI_ARGS}}"

  migrate-up:
    desc: Apply all up migrations
    cmds:
      - migrate -database "$DATABASE_URL" -path migrations up

  migrate-down:
    desc: Roll back the last migration
    cmds:
      - migrate -database "$DATABASE_URL" -path migrations down 1

  db-generate:
    desc: Generate Go code from SQL files using sqlc
    cmds:
      - go tool sqlc generate

  db-init:
    desc: Initialize database (migrate and generate code)
    cmds:
      - task: migrate-up
      - task: db-generate

  db-reset:
    desc: Drop, reapply all migrations and regenerate SQL code
    cmds:
      - migrate -database "$DATABASE_URL" -path migrations drop -f
      - task: migrate-up
      - task: db-generate

  # ---------------------
  # Docker & Security
  # ---------------------
  debug-api:
    desc: Stop all containers, then start only DB for local API debugging
    cmds:
      - echo "üõë Stopping all containers..."
      - docker compose -f docker-compose.base.yml -f docker-compose.integration.yml down -v || true
      - echo "üêò Starting only the database..."
      - docker compose -f docker-compose.base.yml up -d db
      - echo "‚úÖ Database is ready. You can now start your API locally in debug mode."

  build-image:
    desc: Build Docker image for go-hotels with BuildKit
    cmds:
      - DOCKER_BUILDKIT=1 docker build -t {{.IMAGE_NAME}}:{{.IMAGE_TAG}} -t {{.IMAGE_NAME}}:latest .

  security:
    desc: Local scans (gosec, govulncheck, gitleaks)
    deps: [build-image]
    cmds:
      - go tool gosec ./...
      - go tool govulncheck ./...
      - docker run --rm -v $PWD:/repo zricethezav/gitleaks detect --source=/repo

  push-image:
    desc: Push Docker image to GHCR
    cmds:
      - echo $GHCR_PAT | docker login ghcr.io -u "{{.GHCR_USER | lower}}" --password-stdin
      - docker push {{.IMAGE_NAME}}:{{.IMAGE_TAG}}
      - docker push {{.IMAGE_NAME}}:latest

  local-ci:
    desc: Run fast local CI (format check, lint, unit tests, integration tests, coverage)
    cmds:
      - task: fmt-check
      - task: lint
      - task: tidy
      - task: test
      - task: integration-test
      - task: coverage-unit

  kill-port-8080:
    desc: Kill process on port 8080
    cmds:
      - |
        PID=$(lsof -ti:8080)
        if [ -n "$PID" ]; then
          echo "Killing process on port 8080 (PID $PID)"
          kill -9 $PID
        else
          echo "No process running on port 8080"
        fi
