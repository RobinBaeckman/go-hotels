// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Hotel defines model for Hotel.
type Hotel struct {
	Amenities     *[]string           `json:"amenities,omitempty"`
	City          *string             `json:"city,omitempty"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	Name          *string             `json:"name,omitempty"`
	PricePerNight *float32            `json:"price_per_night,omitempty"`
	Stars         *int                `json:"stars,omitempty"`
}

// HotelInput defines model for HotelInput.
type HotelInput struct {
	Amenities     []string `json:"amenities"`
	City          string   `json:"city"`
	Name          string   `json:"name"`
	PricePerNight float32  `json:"price_per_night"`
	Stars         int      `json:"stars"`
}

// CheckInParam defines model for CheckInParam.
type CheckInParam = openapi_types.Date

// CheckOutParam defines model for CheckOutParam.
type CheckOutParam = openapi_types.Date

// CityParam defines model for CityParam.
type CityParam = string

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Error *string `json:"error,omitempty"`
}

// ListHotelsParams defines parameters for ListHotels.
type ListHotelsParams struct {
	City     CityParam      `form:"city" json:"city"`
	Checkin  *CheckInParam  `form:"checkin,omitempty" json:"checkin,omitempty"`
	Checkout *CheckOutParam `form:"checkout,omitempty" json:"checkout,omitempty"`
}

// CreateHotelJSONRequestBody defines body for CreateHotel for application/json ContentType.
type CreateHotelJSONRequestBody = HotelInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hotels
	// (GET /hotels)
	ListHotels(w http.ResponseWriter, r *http.Request, params ListHotelsParams)
	// Create a new hotel
	// (POST /hotels)
	CreateHotel(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List hotels
// (GET /hotels)
func (_ Unimplemented) ListHotels(w http.ResponseWriter, r *http.Request, params ListHotelsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new hotel
// (POST /hotels)
func (_ Unimplemented) CreateHotel(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListHotels operation middleware
func (siw *ServerInterfaceWrapper) ListHotels(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHotelsParams

	// ------------- Required query parameter "city" -------------

	if paramValue := r.URL.Query().Get("city"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "city"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "city", r.URL.Query(), &params.City)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "city", Err: err})
		return
	}

	// ------------- Optional query parameter "checkin" -------------

	err = runtime.BindQueryParameter("form", true, false, "checkin", r.URL.Query(), &params.Checkin)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "checkin", Err: err})
		return
	}

	// ------------- Optional query parameter "checkout" -------------

	err = runtime.BindQueryParameter("form", true, false, "checkout", r.URL.Query(), &params.Checkout)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "checkout", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListHotels(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateHotel operation middleware
func (siw *ServerInterfaceWrapper) CreateHotel(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateHotel(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/hotels", wrapper.ListHotels)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/hotels", wrapper.CreateHotel)
	})

	return r
}

type BadRequestJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type ListHotelsRequestObject struct {
	Params ListHotelsParams
}

type ListHotelsResponseObject interface {
	VisitListHotelsResponse(w http.ResponseWriter) error
}

type ListHotels200JSONResponse []Hotel

func (response ListHotels200JSONResponse) VisitListHotelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListHotels400JSONResponse struct{ BadRequestJSONResponse }

func (response ListHotels400JSONResponse) VisitListHotelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateHotelRequestObject struct {
	Body *CreateHotelJSONRequestBody
}

type CreateHotelResponseObject interface {
	VisitCreateHotelResponse(w http.ResponseWriter) error
}

type CreateHotel201JSONResponse Hotel

func (response CreateHotel201JSONResponse) VisitCreateHotelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateHotel400Response struct {
}

func (response CreateHotel400Response) VisitCreateHotelResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateHotel500Response struct {
}

func (response CreateHotel500Response) VisitCreateHotelResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List hotels
	// (GET /hotels)
	ListHotels(ctx context.Context, request ListHotelsRequestObject) (ListHotelsResponseObject, error)
	// Create a new hotel
	// (POST /hotels)
	CreateHotel(ctx context.Context, request CreateHotelRequestObject) (CreateHotelResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListHotels operation middleware
func (sh *strictHandler) ListHotels(w http.ResponseWriter, r *http.Request, params ListHotelsParams) {
	var request ListHotelsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListHotels(ctx, request.(ListHotelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListHotels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListHotelsResponseObject); ok {
		if err := validResponse.VisitListHotelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateHotel operation middleware
func (sh *strictHandler) CreateHotel(w http.ResponseWriter, r *http.Request) {
	var request CreateHotelRequestObject

	var body CreateHotelJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateHotel(ctx, request.(CreateHotelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateHotel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateHotelResponseObject); ok {
		if err := validResponse.VisitCreateHotelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xVTW/jOAz9KwJ3j0KcbneBwre2lwZYYIudubVBochMrNaWVIpuERT+7wNa+WyM6RSY",
	"mZtpU+9Rj+TzG9jQxuDRc4LyDaIh0yIjDdF1jfZp5m/lpcTOQwnPHdIaNHjTIpRgJcd50JBsja2RvGWg",
	"1jCUUBlG0MDrKKmJyfkV9L3OyP91/DF06Piz2I7X38d1LBHhc+cIKyiZOjzkeI/ZS3KKwSccdLky1f/4",
	"3GFiiWzwjH54NDE2zhp2wRePKXh5t4eNFCISuwyCRIHG2HZ3CotHtJz5K0yWXBRkKKUARZsK5GvmGGBv",
	"AmNzymZa9G4bOMY2jVDvmA2RWUs8SDWW6KqjZnSdq06bsVV85HwkZ/EhIj14t6r5CGzZBMN7NN+1CyQ5",
	"lNjQYd3OM67k06lmOgsx87HjX6/G77vmfmjvMqvejnM+dUqpD247H50t55dB6I5n7Gvtkrq8nSnTNOE1",
	"qS4hJcVBJTRka7UMpGrROGllCQ2jWoTw5PwqaWV8pVbokeQ1YQzEaXLvZ6xcUtEQq7BURi2MfUJfKQF0",
	"jJY7QpXq8GpNQhUpSJGTe3EXdtxI4UNb1VVmkvpAwwtSykVPJ2eTqWgYInoTHZRwPplOzkUXw/WgapGr",
	"lscVDi2R0RiWdlZBCf+6xDc5RR8Z4t0b/Em4hBL+KPa2WexTir319Prj5EN3/dH8nWf283em9Nd0+ik3",
	"2o39GO3GUIrsJiercOpIl6pxaejqRt1ew9+5ojH8XeXFgZcOTta1raH1pg1bMA1sVtKBjb3NZbVCGmne",
	"9TCJOStvCya+CtX6U9p8KEn2lf54I+U30p905eznMo+Jn3ciL2F1oPxx1sy/mMZVyuXaNfwzlvUF6QVJ",
	"5b/TcUeytsooj6+5M7mYNBzJC9JRAyXUzLEsiiZY09QhcXkxvZhCP++/BQAA///WoVXDcAgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
