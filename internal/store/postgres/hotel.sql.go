// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: hotel.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHotel = `-- name: CreateHotel :one
INSERT INTO hotels (name, city, stars, price_per_night, amenities)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, city, stars, price_per_night, amenities
`

type CreateHotelParams struct {
	Name          string
	City          string
	Stars         int32
	PricePerNight pgtype.Numeric
	Amenities     []string
}

func (q *Queries) CreateHotel(ctx context.Context, arg CreateHotelParams) (Hotel, error) {
	row := q.db.QueryRow(ctx, createHotel,
		arg.Name,
		arg.City,
		arg.Stars,
		arg.PricePerNight,
		arg.Amenities,
	)
	var i Hotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.City,
		&i.Stars,
		&i.PricePerNight,
		&i.Amenities,
	)
	return i, err
}

const listHotels = `-- name: ListHotels :many
SELECT id, name, city, stars, price_per_night, amenities FROM hotels WHERE city = $1
`

func (q *Queries) ListHotels(ctx context.Context, city string) ([]Hotel, error) {
	rows, err := q.db.Query(ctx, listHotels, city)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hotel
	for rows.Next() {
		var i Hotel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.City,
			&i.Stars,
			&i.PricePerNight,
			&i.Amenities,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
