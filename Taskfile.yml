version: "3.44.1"

dotenv: [".env"]

env:
  DATABASE_URL: postgres://gohotels:secret@localhost:5432/gohotels?sslmode=disable

vars:
  IMAGE_NAME: ghcr.io/{{.GHCR_USER | lower}}/go-hotels
  IMAGE_TAG: '{{.GITHUB_SHA | default "dev"}}'

tasks:
  fmt:
    desc: Format code (fix issues)
    cmds:
      - go fmt ./...
      - go tool goimports -w .

  fmt-check:
    desc: Fail if code is not formatted
    cmds:
      - test -z "$(go fmt ./...)"
      - test -z "$(go tool goimports -l .)"

  create-hotel:
    desc: Create a hotel via API
    cmds:
      - |
        http POST http://localhost:8080/hotels \
        name="Test Hotel" \
        city="Göteborg" \
        stars:=4 \
        price_per_night:=123.45 \
        amenities:='["wifi", "breakfast"]'

  list-hotels:
    desc: List hotels in a specific city
    cmds:
      - http GET http://localhost:8080/hotels city==Göteborg

  generate:
    desc: Generate Go code from OpenAPI spec
    cmds:
      - go tool oapi-codegen -config api/oapi-codegen.cfg.yaml api/openapi.yaml
    sources:
      - api/openapi.yaml
      - api/oapi-codegen.cfg.yaml
    generates:
      - api/openapi.gen.go

  lint:
    desc: Run static analysis with golangci-lint
    cmds:
      - go tool golangci-lint run ./...

  tidy:
    desc: Run go mod tidy
    cmds:
      - git diff --exit-code go.mod go.sum || (echo "❌ go.mod or go.sum are not tidy. Run 'go mod tidy' and commit the changes." && exit 1)


  test:
    desc: Run unit tests and generate coverage profile
    cmds:
      - go test ./...

  coverage:
    desc: Check code coverage threshold and per-directory stats 
    cmds:
      - go test -coverprofile=coverage.out -covermode=set ./... > /dev/null
      - ./scripts/coverage-check.sh

  run:
    desc: Run the REST server
    cmds:
      - go run ./cmd/rest

  build:
    desc: Build the REST binary
    cmds:
      - mkdir -p bin
      - go build -o bin/api ./cmd/rest

  ci:
    desc: Run full CI pipeline (generate + lint + test)
    deps: [generate, lint, test]

  # ---------------------
  # Database-related tasks
  # ---------------------

  migrate-create:
    desc: Create a new migration file
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "❌ You must provide a name: task migrate-create -- create_hotels_table"
          exit 1
        fi
        migrate create -ext sql -dir migrations -seq "{{.CLI_ARGS}}"

  migrate-up:
    desc: Apply all up migrations
    cmds:
      - migrate -database "$DATABASE_URL" -path migrations up

  migrate-down:
    desc: Roll back the last migration
    cmds:
      - migrate -database "$DATABASE_URL" -path migrations down 1

  db-generate:
    desc: Generate Go code from SQL files using sqlc
    cmds:
      - go tool sqlc generate

  db-init:
    desc: Initialize database (migrate and generate code)
    cmds:
      - task: migrate-up
      - task: db-generate

  db-reset:
    desc: Drop, reapply all migrations and regenerate SQL code
    cmds:
      - migrate -database "$DATABASE_URL" -path migrations drop -f
      - task: migrate-up
      - task: db-generate

  build-image:
    desc: Build Docker image for go-hotels
    cmds:
      - docker build -t {{.IMAGE_NAME}}:{{.IMAGE_TAG}} -t {{.IMAGE_NAME}}:latest .

  security:
    desc: Local scans (gosec, govulncheck, gitleaks)
    deps: [build-image]
    cmds:
      - go tool gosec ./...
      - go tool govulncheck ./...
      - docker run --rm -v $PWD:/repo zricethezav/gitleaks detect --source=/repo

  push-image:
    desc: Push Docker image to GHCR
    vars:
      IMAGE_NAME: ghcr.io/{{.GHCR_USER | lower}}/go-hotels
      IMAGE_TAG: '{{.GITHUB_SHA | default "dev"}}'
    cmds:
      - echo $GHCR_PAT | docker login ghcr.io -u "{{.GHCR_USER | lower}}" --password-stdin
      - docker push {{.IMAGE_NAME}}:{{.IMAGE_TAG}}
      - docker push {{.IMAGE_NAME}}:latest
